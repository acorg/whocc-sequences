#! /usr/bin/env python3
# -*- Python -*-

"""
Updates seqdb with matching HI names
"""

import sys, os, re, traceback, pprint, datetime, collections
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb
from whoccseq import fasta as fasta_m, open_file, utility

# ----------------------------------------------------------------------

STAT_WHOCC_ANNUAL_REPORT = [["{}0201".format(year), "{}0201".format(year + 1), 0] for year in range(2000, datetime.date.today().year + 1)]

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))
    if args.reset:
        db.reset_hi_data()
    hi = HIDB(os.path.expandvars(os.path.expanduser(args.path_to_hidb)))
    match(db, hi)
    db.report()
    if args.save:
        db.save()
    global STAT_WHOCC_ANNUAL_REPORT
    pprint.pprint(STAT_WHOCC_ANNUAL_REPORT)
    print("Total matched:", sum(es[2] for es in STAT_WHOCC_ANNUAL_REPORT))

# ----------------------------------------------------------------------

def match(db, hi):
    for e1 in db.data:
        name = e1["N"]
        virus_type = e1["v"]
        lab_to_entries = collections.defaultdict(list)
        for e2 in e1["s"]:
            if e2.get("g", "HA") == "HA":
                for lab in e2["l"]:
                    lab_to_entries[lab].append(e2)
        for lab, e2l in lab_to_entries.items():
            hi_entry = hi.find_antigen_by_name(name)
            if not hi_entry and lab == "CDC":
                for e2 in e2l:
                    for cdcid in e2["l"][lab]:
                        hi_entry = hi.find_antigen_by_cdcid(cdcid)
                        if hi_entry:
                            break
                    if hi_entry:
                        break
            if hi_entry:
                try:
                    matches = match_passages(name, [e2["p"] or [""] for e2 in e2l], [(v3, e3.get("p", "")) for v3, e3 in hi_entry["v"].items()])
                except:
                    module_logger.error('hi_entry {}'.format(hi_entry))
                    module_logger.error('e2l {}'.format(e2l))
                    raise
                if matches:
                    apply_matches(matches, name, e1, e2l, hi_entry, virus_type, hi)

# ----------------------------------------------------------------------

def apply_matches(matches, name, db_entry, seq_entries, hi_entry, vt, hi):
    global STAT_WHOCC_ANNUAL_REPORT
    for m in matches:
        for seq_entry in seq_entries:
            if m[0] in seq_entry["p"] or (m[0] == "" and not seq_entry["p"]):
                seq_entry["h"] = "{} {}".format(name, m[1])
                if vt == "B":
                    update_b_lineage(name=name, hi_name=seq_entry["h"], db_entry=db_entry, hi_entry=hi_entry)
                elif vt[:2] == "H1":
                    update_h1_lineage(name=name, hi_name=seq_entry["h"], db_entry=db_entry, vt=vt)
                update_date(name=name, hi_name=seq_entry["h"], db_entry=db_entry, hi_entry=hi_entry)

                # use just the most recent table to avoid counting twice
                if hi_entry["v"][m[1]]["t"]:
                    table = hi.db["tables"][hi_entry["v"][m[1]]["t"][-1]]["date"]
                    for es in STAT_WHOCC_ANNUAL_REPORT:
                        if es[0] <= table and es[1] > table:
                                es[2] += 1
                break

# ----------------------------------------------------------------------

def update_b_lineage(name, hi_name, db_entry, hi_entry):
    if hi_entry.get("l"):
        update_lineage(name=name, hi_name=hi_name, db_entry=db_entry, lineage=hi_entry["l"])

# ----------------------------------------------------------------------

def update_h1_lineage(name, hi_name, db_entry, vt):
    if vt == "H1PDM":
        lineage = "2009PDM"
    elif vt == "H1SEAS":
        lineage = "SEASONAL"
    else:
        raise ValueError("Unrecognized HI vt: {}".format(vt))
    update_lineage(name=name, hi_name=hi_name, db_entry=db_entry, lineage=lineage)

# ----------------------------------------------------------------------

def update_lineage(name, hi_name, db_entry, lineage):
    if not db_entry.get("l"):
        db_entry["l"] = lineage
    elif db_entry["l"] != lineage:
        module_logger.warning('Lineage mismatch for {} {}: seq:{} hi:{}'.format(name, hi_name, db_entry["l"], lineage))

# ----------------------------------------------------------------------

def update_date(name, hi_name, db_entry, hi_entry):
    for date in hi_entry.get("d", []):
        if date not in db_entry["d"]:
            db_entry["d"].append(date)
    db_entry["d"].sort()

# ----------------------------------------------------------------------

def match_passages(name, seq_passages, hi_variants_passages):
    if len(seq_passages) == 1 and len(hi_variants_passages) == 1:
        # just one possibility, always matches regardless of actual passages
        r = [[seq_passages[0][0], hi_variants_passages[0][0]]]
    else:
        # print("{:50s} {:60s} {}".format(name, repr(seq_passages), repr(hi_passages)))
        seq_left = seq_passages[:]
        hi_left = hi_variants_passages[:]
        r = []
        while seq_left and hi_left:
            levels = sorted(([match_level(seq_p, hi_p[1]), seq_p, hi_p] for seq_group in seq_left for seq_p in seq_group for hi_p in hi_left), key=lambda e: e[0])
            # print("? {:48s} {:60s} {}".format(name, repr(seq_left), levels), file=sys.stderr)
            r.append([levels[0][1], levels[0][2][0]])
            seq_left = [e for e in seq_left if levels[0][1] not in e]
            hi_left.remove(levels[0][2])
    return r

# ----------------------------------------------------------------------

sRePassageGroup = r"(?:(?P<p{}>[A-Z]+[\d\?]*)/?)?"
sRePassageDate = r"(?:\s*\((?P<date>\d+-\d+-\d+)\))?"
sRePassage = re.compile("".join(sRePassageGroup.format(i) for i in range(10)) + sRePassageDate)

def match_level(sp, hp):
    if not sp:
        level = 90
        if hp == "X?":
            level -= 1
    elif not hp:
        level = 91
    elif sp == hp:
        level = 0
    else:
        sm = sRePassage.match(sp)
        hm = sRePassage.match(hp)
        if not sm or not hm:
            module_logger.warning('Cannot parse passage {!r} {!r}'.format(sp, hp))
            level = 200
        else:
            spp = [sm.group(k) for k in sorted(sm.groupdict()) if k != "date" and sm.group(k)]
            hpp = [hm.group(k) for k in sorted(hm.groupdict()) if k != "date" and hm.group(k)]
            if spp and hpp:
                if spp == hpp:
                    # matches without date
                    if sm.group("date") and hm.group("date"):
                        level = 11        # different dates
                    else:
                        level = 10        # one of the dates missing
                elif spp[-1] == hpp[-1]:
                    level = 20
                    for i in range(2, min(len(spp), len(hpp)) + 1):
                        if spp[-i] == hpp[-i]:
                            level -= 1
                        else:
                            break
                elif same_passage_type(spp[-1], hpp[-1]):
                    level = 30
                    for i in range(2, min(len(spp), len(hpp)) + 1):
                        if same_passage_type(spp[-i], hpp[-i]):
                            level -= 1
                        else:
                            break
                elif close_passage_type(spp[-1], hpp[-1]):
                    level = 40
                    for i in range(2, min(len(spp), len(hpp)) + 1):
                        if close_passage_type(spp[-i], hpp[-i]):
                            level -= 1
                        else:
                            break
                else:
                    # module_logger.warning('{} {} {} --- {} {} {}'.format(sp, spp, sm.group("date"), hp, hpp, hm.group("date")))
                    level = 100
            else:
                level = 110
    return level

# ----------------------------------------------------------------------

sReSplitPassageNumber = re.compile(r"^([A-Z]+)")

def same_passage_type(sp, hp):
    global sReSplitPassageNumber
    sp_m = sReSplitPassageNumber.match(sp)
    hp_m = sReSplitPassageNumber.match(hp)
    return sp_m and hp_m and sp_m.group(1) == hp_m.group(1)

def close_passage_type(sp, hp):
    global sReSplitPassageNumber
    sp_m = sReSplitPassageNumber.match(sp)
    hp_m = sReSplitPassageNumber.match(hp)
    sp_p = sp_m and ("MDCK" if sp_m.group(1) == "SIAT" else sp_m.group(1))
    hp_p = hp_m and ("MDCK" if hp_m.group(1) == "SIAT" else hp_m.group(1))
    return sp_p and hp_p and sp_p == hp_p

# ----------------------------------------------------------------------

class HIDB:

    def __init__(self, filename):
        with utility.timeit('Reading {}'.format(filename)):
            self.db = open_file.read_json(filename)
        if self.db.get("  version") != "whocc-antigens-sera-v2":
            raise ValueError("Unsupported hidb version: {}".format(self.db.get("  version")))
        self.antigens = self.db["antigens"]   # note: they are sorted by "n"

    def find_antigen_by_cdcid(self, cdcid):
        cdcid = "CDC#{}".format(cdcid)
        for antigen in self.antigens:
            if cdcid in antigen["i"]:
                return antigen
        return None

    # Adoption if python 3.5 bisect module function
    def find_antigen_by_name(self, name):
        lo = 0
        hi = len(self.antigens)
        while lo < hi:
            mid = (lo + hi) // 2
            mid_name = self.antigens[mid]["n"]
            if mid_name == name:
                return self.antigens[mid]
            if mid_name < name:
                lo = mid + 1
            else:
                hi = mid
        return None

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--reset', action='store_true', dest='reset', default=False, help='Remove previous matching data.')
    parser.add_argument('-n', '--no-save', action='store_false', dest='save', default=True, help='Do not save resulting database.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/WHO/seqdb.json.xz', help='Path to sequence database.')
    parser.add_argument('--hidb', action='store', dest='path_to_hidb', default='~/WHO/hidb.json.xz', help='Path to HI name database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    with utility.timeit(sys.argv[0]):
        exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
