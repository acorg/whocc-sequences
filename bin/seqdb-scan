#! /usr/bin/env python3
# -*- Python -*-

"""
Scans sequences.
"""

import sys, os, re, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb
from whoccseq import fasta as fasta_m, open_file

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))

    if args.pos is not None and args.len is not None:
        r = {}
        for e in db.iterate_sequences_aligned_with_virus_type(args.virus_type):
            pos = args.pos - 1 - e["seq"]["shift"]
            if len(e["seq"]["aa"]) > (pos + args.len):
                s = e["seq"]["aa"][pos:pos + args.len]
                if s in r:
                    r[s] += 1
                else:
                    r[s] = 1
        print("\n".join("{} {:3d}".format(ss, r[ss]) for ss in sorted(r)))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--flu', action='store', dest='virus_type', default='B', help='Scan this type/subtype: B, H1, H3, A(H1N1), A(H3N2).')
    parser.add_argument('--pos', action='store', dest='pos', type=int, default=None, help='Report subsequences at given pos.')
    parser.add_argument('--len', action='store', dest='len', type=int, default=None, help='Report subsequences at given pos with given length.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/GH/whocc-sequences/seqdb/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
