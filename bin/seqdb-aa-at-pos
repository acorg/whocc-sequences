#! /usr/bin/env python3
# -*- Python -*-

"""
reports amino-acids at each position for the given flu type
"""

import sys, os
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb, utility

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))

    aa_at_pos = {}
    for e in db.iterate_sequences_aligned_with_virus_type(args.virus_type):
        for pos in range(e.aa_len()):
            aa_at_pos.setdefault(pos + 1, set()).add(e.aa_at_pos0(pos))

    print("positions:", len(aa_at_pos), "max aa per pos:", max(len(v) for v in aa_at_pos.values()), "average aa per pos:", sum(len(v) for v in aa_at_pos.values()) / len(aa_at_pos))
    print("\n".join("{:3d} {}".format(pos, "".join(sorted(aa_at_pos[pos]))) for pos in sorted(aa_at_pos)))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--flu', action='store', dest='virus_type', default='A(H3N2)', help='Scan this type/subtype: B, H1, H3, A(H1N1), A(H3N2).')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/WHO/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    with utility.timeit(sys.argv[0]):
        exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
