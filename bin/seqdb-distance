#! /usr/bin/env python3
# -*- Python -*-

"""
Computes humming distance between some sequence and other sequences
"""

import sys, os
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import re, traceback, operator
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb, utility

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))
    base_seqs = [e for e in db.iterate_sequences_with_name(args.base_seq[0])]
    if len(base_seqs) > 1:
        module_logger.warning("Multiple base sequences selected for {}:\n  {}".format(args.base_seq[0], "\n  ".join(s.name_hi() for s in base_seqs)))
    elif not base_seqs:
        raise ValueError("No base sequences selected for {}".format(args.base_seq[0]))
    for base_seq in base_seqs:
        data = [e for e in db.iterate_sequences_with(
            virus_types=base_seq.virus_type(),
            lineage=base_seq.lineage(),
            aligned=True,
            start_date=args.start_date,
            end_date=args.end_date,
            name_matcher=args.name_match[0])]
        module_logger.info('{} matches found for {}'.format(len(data), args.name_match[0]))
        most_common_length = seqdb.most_common_length(data, amino_acid=args.amino_acids)
        module_logger.info('Most common length {}'.format(most_common_length))
        distances = sorted(([e.name_hi(), base_seq.hamming_distance(e, amino_acid=args.amino_acids, truncate=most_common_length)] for e in data), key=operator.itemgetter(1))
        print(base_seq.name_hi())
        print("\n".join("{:6d} {}".format(e[1], e[0]) for e in distances))
        print()

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('base_seq', nargs=1, help='Sequence name to print distances to.')
    parser.add_argument('name_match', nargs=1, help='Regexp to select other sequences.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--amino-acids', action='store_true', dest='amino_acids', default=False, help='Report distances for amino-acids instead of nucleotites')
    parser.add_argument('--start-date', action='store', dest='start_date', default=None, help='Export sequences for antigens isolated on or after that date (YYYYMMDD).')
    parser.add_argument('--end-date', action='store', dest='end_date', default=None, help='Export sequences for antigens isolated before that date (YYYYMMDD).')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/WHO/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    with utility.timeit(sys.argv[0]):
        exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
