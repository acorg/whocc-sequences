#! /usr/bin/env python3
# -*- Python -*-

"""
Aligns all or requested sequences, report shift and error in case of failure
"""

import sys, os, re, traceback, pprint, datetime
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb, clades as clades_m, open_file, fasta as fasta_m, utility

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))
    if len(args.names) == 1:
        if args.names[0] == "all":
            it = db.iterate_sequences()
        elif args.names[0] == "not-aligned":
            it = db.iterate_sequences_not_aligned()
        else:
            it = db.iterate_sequences_with_name(args.names)
    else:
        it = db.iterate_sequences_with_name(args.names)
    for e in it:
        e.align()

    db.report()
    if args.save:
        db.save()

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('names', nargs='+', help='Names to align, use "all" to align all, "not-aligned" to align not yet aligned.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/WHO/seqdb.json.xz', help='Path to sequence database.')
    parser.add_argument('-n', '--no-save', action='store_false', dest='save', default=True, help='Do not save resulting database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    with utility.timeit(sys.argv[0]):
        exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
