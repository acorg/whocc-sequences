#! /usr/bin/env python3
# -*- Python -*-

"""
Detects victoria and yamagata lineage.

The main difference between Bvic and Byam is that Bvic has an extra
amino acid between residues 164 and 165 (usually K).

In reality sometimes N inserted. But in the most cases we have DQI at
186 for victoria and at 185 for yamagata.

"""

import sys, os, re, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb
from whoccseq import fasta as fasta_m, open_file

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))

    for name, e1 in db.names.items():
        if e1["virus_type"] == "B":
            for e2 in e1["data"]:
                shift = e2.get("shift")
                if shift is not None:
                    l165 = lineage_by_165(e2)
                    l185 = lineage_by_185(e2)
                    if l165 == l185:
                        lineage = l165
                    elif l185 is not None:
                        lineage = l185
                    elif l165 is not None:
                        lineage = l165
                    else:
                        lineage = None
                    if lineage != e1.get("lineage") and e1.get("lineage") is not None:
                        print("{} {} vs {} (detected by seq) for {}".format(e2["aa"][164:190], e1.get("lineage"), lineage, e2.get("hi_name") or "{} {}".format(name, e2.get("passages", ""))))
    # if args.save:
    #     db.save()

# ----------------------------------------------------------------------

def lineage_by_165(e2):
    pos = 164 - e2["shift"]
    lineage = None
    if len(e2["aa"]) > pos:
        if e2["aa"][pos] == "K":
            lineage = "VICTORIA"
        elif e2["aa"][pos] == "N":
            lineage = "YAMAGATA"
    return lineage

# ----------------------------------------------------------------------

def lineage_by_185(e2):
    pos = 184 - e2["shift"]
    lineage = None
    if len(e2["aa"]) > (pos + 3):
        if e2["aa"][pos+1:pos+4] == "DQI":
            lineage = "VICTORIA"
        elif e2["aa"][pos:pos+3] == "DQI":
            lineage = "YAMAGATA"
    return lineage

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/GH/whocc-sequences/seqdb/seqdb.json.xz', help='Path to sequence database.')
    parser.add_argument('-n', '--no-save', action='store_false', dest='save', default=True, help='Do not save resulting database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
