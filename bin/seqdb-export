#! /usr/bin/env python3
# -*- Python -*-

"""
Exports seqdb data into fasta.
"""

import sys, os, glob, re, json, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb
from whoccseq import fasta as fasta_m, open_file

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))
    data = db.all()
    if args.lab:
        data = db.select_by("lab", args.lab.upper(), data)
    if args.virus_type:
        data = db.select_by("virus_type", fix_virus_type(args.virus_type), data)
    names = db.names_sorted_by(args.sort_by, data)
    export(data, names, args)

# ----------------------------------------------------------------------

def export(data, names, args):
    module_logger.info('Writing {}'.format(args.output))
    with open_file.open_for_writing_binary(args.output) as f:
        for name in names:
            e1  = data[name]
            for e2 in e1["data"]:
                date = e1["dates"][-1] if e1.get("dates") else ""
                lab = next(iter(e2.get("labs", {}).keys()), "")
                if lab:
                    lab_id = next(iter(e2["labs"][lab]), "")
                else:
                    lab_id = ""
                name_to_write = re.sub(r"\s+", " ", args.name_format.format(name=name, passage=next(iter(e2["passages"]), ""), date=date, lab_id=lab_id, lab=lab, gene=e2.get("gene", "")))
                f.write(fasta_m.generate_one(name=name_to_write, sequence=e2["sequence"], encode=args.name_encode).encode("utf-8"))

# ----------------------------------------------------------------------

def fix_virus_type(vt):
    vt = vt.upper()
    if vt == "H1":
        vt = "A(H1N1)"
    elif vt == "H3":
        vt = "A(H3N2)"
    if vt not in ["B", "A(H1N1)", "A(H3N2)"]:
        raise ValueError("Unrecognized virus type: {}".format(vt))
    return vt

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('output', nargs="?", help='Fasta files to write.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--lab', action='store', dest='lab', default=None, help='Export just for this lab.')
    parser.add_argument('--flu', action='store', dest='virus_type', default=None, help='Export just for this virus type/subtype: B, H1, H3, A(H1N1), A(H3N2).')
    parser.add_argument('--sort', action='store', dest='sort_by', default="date", help='Sort list before exporting by "date", "name".')
    parser.add_argument('-f', '--format', action='store', dest='output_format', default='fasta', help='Output format: fasta')
    parser.add_argument('--name-format', action='store', dest='name_format', default='{name} {passage}', help='Name format, possible fields: {name} {date} {lab_id} {passage} {lab} {gene}')
    parser.add_argument('--name-encode', action='store_true', dest='name_encode', default=False, help='Encode spaces and parentheses in names')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/GH/whocc-sequences/seqdb/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
