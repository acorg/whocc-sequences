#! /usr/bin/env python3
# -*- Python -*-

"""
Exports seqdb data into fasta.
"""

import sys, os, re, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb
from whoccseq import fasta as fasta_m, open_file

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))
    data = db.select(lab=args.lab, virus_type=args.virus_type, lineage=args.lineage, gene=args.gene)
    if args.aligned:
        data = db.select_aligned(data)
    names = db.names_sorted_by(args.sort_by, data)
    export(db, data, names, start_date=get_date(args.start_date), end_date=get_date(args.end_date), args=args)

# ----------------------------------------------------------------------

def export(db, data, names, start_date, end_date, args):
    if args.output_format != "fasta":
        raise ValueError("Unsupported output format: {}".format(args.output_format))
    module_logger.info('Writing {}'.format(args.output))
    if args.amino_acids:
        seq_key = "aa"
    else:
        seq_key = "nuc"
    with open_file.open_for_writing_binary(args.output) as f:
        for name in names:
            e1  = data[name]
            for e2 in e1["data"]:
                date = e1["dates"][-1] if e1.get("dates") else "NO-DATE"
                if (not start_date or start_date <= date) and (not end_date or end_date > date) and (not args.with_hi_name or e2.get("hi_name")):
                    lab = next(iter(e2.get("labs", {}).keys()), "")
                    if lab:
                        lab_id = next(iter(e2["labs"][lab]), "")
                    else:
                        lab_id = ""
                    name_to_write = re.sub(r"\s-", "-", re.sub(r"\s+", " ", args.name_format.format(name=name, hi_name=e2.get("hi_name", name), passage=next(iter(e2["passages"]), ""), date=date, lab_id=lab_id, lab=lab, gene=e2.get("gene", ""))))
                    f.write(fasta_m.generate_one(name=name_to_write, sequence=db.get(e2, amino_acid=args.amino_acids, aligned=args.aligned), encode=args.name_encode, split=args.sequence_wrap).encode("utf-8"))

# ----------------------------------------------------------------------

sReDate = re.compile(r"^\s*(?P<year>\d\d\d\d)[-\s]*(?P<month>\d\d)[-\s]*(?P<day>\d\d)\s*$")

def get_date(s):
    if s:
        m = sReDate.match(s)
        if not m:
            raise ValueError("Invalid date: {!r}".format(s))
        d = "-".join((m.group("year"), m.group("month"), m.group("day")))
    else:
        d = None
    return d

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('output', nargs="?", help='Fasta file to write.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--lab', action='store', dest='lab', default=None, help='Export just for this lab.')
    parser.add_argument('--flu', action='store', dest='virus_type', default=None, help='Export just for this virus type/subtype: B, H1, H3, A(H1N1), A(H3N2).')
    parser.add_argument('--lineage', action='store', dest='lineage', default=None, help='Export just for this lineage: VICTORIA, YAMAGATA, 2009PDM.')
    parser.add_argument('--gene', action='store', dest='gene', default="HA", help='HA or NA.')
    parser.add_argument('--sort', action='store', dest='sort_by', default="date", help='Sort list before exporting by "date", "name".')
    parser.add_argument('-f', '--format', action='store', dest='output_format', default='fasta', help='Output format: fasta')
    parser.add_argument('--name-format', action='store', dest='name_format', default='{name} {passage}', help='Name format, possible fields: {name} {date} {lab_id} {passage} {lab} {gene}')
    parser.add_argument('--name-encode', action='store_true', dest='name_encode', default=False, help='Encode spaces and parentheses in names')
    parser.add_argument('--amino-acids', action='store_true', dest='amino_acids', default=False, help='Export amino-acids instead of nucleotites')
    parser.add_argument('--no-wrap', action='store_false', dest='sequence_wrap', default=True, help='Do not wrap sequence and generate long lines')
    parser.add_argument('--aligned', action='store_true', dest='aligned', default=False, help='Write aligned sequences.')
    parser.add_argument('--start-date', action='store', dest='start_date', default=None, help='Export sequences for antigens isolated on or after that date (YYYYMMDD).')
    parser.add_argument('--end-date', action='store', dest='end_date', default=None, help='Export sequences for antigens isolated before that date (YYYYMMDD).')
    parser.add_argument('--with-hi-name', action='store_true', dest='with_hi_name', default=False, help='Export sequences having hi_name only (i.e. matched with HI data).')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/GH/whocc-sequences/seqdb/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
