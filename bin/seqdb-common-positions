#! /usr/bin/env python3
# -*- Python -*-

"""
Finds common positions for sequences
"""

import sys, os, re, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
sys.path[:0] = [os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))]
import logging; module_logger = logging.getLogger(__name__)

from whoccseq import seqdb
from whoccseq import fasta as fasta_m, open_file, utility

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.SeqDB(os.path.expandvars(os.path.expanduser(args.path_to_db)))
    aa = [e.aa_aligned() for e in db.iterate_sequences_aligned_with_virus_type(virus_type=args.virus_type) if e.gene() == args.gene and (not args.lab or e.lab_matches(args.lab)) and (not args.lineage or e.lineage() == args.lineage)]
    print("aa", len(aa))
    find_common(aa, args.min_common_in_group)

# ----------------------------------------------------------------------

def find_common(aa, min_common_in_group):
    common = []
    for s in aa:
        if not common:
            common.append({"n": 1, "c": {pos: a for pos, a in enumerate(s)}})
        else:
            for index in range(len(common)):
                com = {pos: a for pos, a in common[index]["c"].items() if len(s) > pos and s[pos] == a}
                if len(com) >= min_common_in_group:
                    common[index]["c"] = com
                    common[index]["n"] += 1
                    break
            else:
                common.append({"n": 1, "c": {pos: a for pos, a in enumerate(s)}})
    pprint.pprint(common, width=200)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--lab', action='store', dest='lab', default=None, help='lab.')
    parser.add_argument('--flu', action='store', dest='virus_type', required=True, help='virus type/subtype: B, H1, H3, A(H1N1), A(H3N2).')
    parser.add_argument('--lineage', action='store', dest='lineage', default=None, help='Export just for this lineage: VICTORIA, YAMAGATA, 2009PDM.')
    parser.add_argument('--gene', action='store', dest='gene', default="HA", help='HA or NA.')
    parser.add_argument('--min-common', action='store', type=int, dest='min_common_in_group', default=10, help='Minimum common in a group.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/WHO/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    with utility.timeit(sys.argv[0]):
        exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
